
{-# LANGUAGE TypeFamilies
           , TypeOperators
           , MultiParamTypeClasses
           , FlexibleInstances
           , FlexibleContexts
           , GADTs
           , StandaloneDeriving
           , DataKinds
#-}


-- |
-- Module      : Omada.Help
-- Description : help page
-- Copyright   : (c) Erich Gut
-- License     : BSD3
-- Maintainer  : zerich.gut@gmail.com
--
-- help page.
module Omada.Help
  ( help, tutorial
  ) where

import Control.Monad

import Omada.Util

help :: String
help = join $ tween "\n"
  [ "Usage:"
  , ""
  , "  instruction = [command | expression]"
  , ""
  , "  command     = quit | help | setcpx | load | varbind | tutorial"
  , "  quit        = ':quit' | ':q'"
  , "  help        = ':help' | ':h' | ':?'"
  , "  setcpx      = (':complex' | ':c') cpxid"
  , "  cpxid       = 'empty' | 'kleineBottle' | 'moebiusStrip'"
  , "              | 'torus' num | 'projectiveSpace' num | 'simplex' num"
  , "              | 'sphere' num | 'plane' num num"
  , "  load        = (':load' | ':l' ) filepth"
  , "  varbind     = 'let' var '=' expression"
  , "  tutorial    = ':tutorial'"
  , ""
  , "  expression  = [sigs] term [('+' | '-'| '!') expression]"
  , "  sigs        = ('+' | '-') sigs"
  , "  term        = letdecl | atom [term]"
  , "  letdecl     = 'let' var '=' expression 'in' expression"
  , "  atom        = 'D' | 'C' | 'H'| 'K' | 'L'| '#' | 'b' | 'd' | 'h'"
  , "              | num | var | '(' expression ')"
  , ""
  , "  filepth     = '\"' [chrs] '\"'"
  , "  var         = chrs"
  , "  chrs        = chr [chrs]"
  , "  chr         = <any character>"
  , "  num         = dig [num]"
  , "  dig         = <0..9>"
  , ""
  , "Description:"
  , ""
  , "  :complex cpx       sets the 'cpx' as the actual simplical complex."
  , "  :quit | :q         exits the program."
  , "  :help | :h | :?    shows this help."
  , "  :load \"foo\"        loads the instructions containing in the file 'foo'."
  , "  let x = 0          binds the variable 'x' to the expression zero."
  , ""
  , "  H                  sequence of homology groups of the chain complex, given by the actual"
  , "                     simplical complex. Its n-th component 'H n' denotes the n-th homology group."
  , "                     Note: Entering just 'H' will display only the non-trivial groups."
  , "  C                  matrix of chains, where 'C n' denotes the sequence of n-simplices of the"
  , "                     actual complex and 'C n i' the i-th simplex (starting from 0) of 'C n'."
  , "                     'C' together with the boundary operator 'd' (see below) form the"
  , "                     chain complex of the actual simplical complex."
  , "  D                  matrix of chains, where 'D n' denotes a sequence of generators for the"
  , "                     abelian group of n-cycles and 'D n i' the i-th cycle of 'D n'."
  , "  L                  matrix of chains, where 'L n' denotes a sequence of n-cycles, such that"
  , "                     there homology classes - i.e. 'h (L n)' - is a generator for the"
  , "                     n-th homology group."
  , "  K                  matrix of homology classes, where 'K n' is a generator for the"
  , "                     n-th homology group. Note: 'K' is equivalent to 'h D'."  
  , ""
  , "  d                  the boundary operator, which assigns to each chain its boundary"
  , "  b                  the ´inverse´ boundary operator, which tries to find a (n+1)-chain 'x' for"
  , "                     a given n-cycle 'y'. such that 'd x' is equal to 'y'."
  , "  h                  the homology class operator, which assigns to each cycle its"
  , "                     homology class."
  , "  #                  the span operator, which assigns to each sequence the lowest and the"
  , "                     highest index of the non-trivial components."
  , ""
  , "Examples:"
  , ""
  , "  H 0                the simplical homology group at dimension zero for the actual simplical"
  , "                     complex."
  , "  # H                the span of 'H'."
  , ""
  , "  C 0                the vertices of the actual simplical complex."
  , "  C 0 2              the third vertex of the actual simplical complex (counting starts at 0)."
  , "  D 1 0 - D 1 1      the subtraction of the first minus the second 1-cycle of the actual"
  , "                     simplical complex."
  , "  2!D 2 0            the scalar multiplication of the first 2-cycle with 2."
  , ""
  , "  d (C 2 0)          the boundary of 'C 2 0'."
  , "  d (C 1)            the sequence of boundaries of 'C 1'"
  , "  d (d C)            the sequence of boundaries of the boundaries of 'C', which is zero."
  , "  h (D 1 4)          the homology class of the 1-cycle 'D 1 4'."
  , "  b (D 2 1 - D 2 0)  if the homology class of 'D 2 1 - D 2 0' is zero, then"
  , "                     'b (D 2 1 - D 2 0)' is a 3-chain 'x', such that 'd x' is equal to"
  , "                     'D 2 1 - D 2 0', otherwise the result will be a failure."  
  , ""
  , "Note:"
  , " - As the computational complexity can grow very fast and if one is interested only in some"
  , "   special homology groups, it is recommended to evaluate this groups directly by entering"
  , "   'H n' insted of 'H'."
  , " - Many grammatically valid expressions will end up in a failure, because they do not evaluate to"
  , "   a meaningful value. For example:"
  , "     - 'C 1 0 + C 2 0' will end up in a failure, because 1-chains and 2-chains are not addable!"
  , "     - 'C 1 0 0' will end up in a failure, because the matrix 'C' is applied to to many"
  , "       parameters!"
  , "     - 'D d' will end up in a failure, because applying the matrix 'D' to the boundary operator"
  , "       makes no sens!"
  ]

tutorial :: String
tutorial = join $ tween "\n"
  [ "Introduction to OMADA"
  , "---------------------"
  , ""
  , "Welcome to this tutorial on OMADA, a versatile and efficient computational tool designed for"
  , "applications in algebraic topology. OMADA streamlines complex operations related to chains,"
  , "cycles and homology, making it an invaluable resource for mathematicians and researchers"
  , "exploring topological spaces. This guide will introduce you to the core functionalities of OMADA"
  , "and provide you with the foundational knowledge needed to begin your exploration."
  , ""
  , "OMADA is equipped with the following key features:"
  , ""
  , "  1. Boundary of a Chain: Compute the boundary of a given chain efficiently, a fundamental"
  , "     operation in understanding the structure of simplical complexes. This helps you verify"
  , "     exactness and explore the boundaries of various dimensional spaces."
  , ""
  , "  2. Generator for Cycles: Generate cycles within a given complex, enabling the"
  , "     identification of closed chains that play a crucial role in studying the structure of"
  , "     topological spaces."
  , ""
  , "  3. Homology Class of a Cycle: Determine the homology class of a given cycle, providing"
  , "     insight into how cycles relate to one another within the context of homology groups."
  , ""
  , "  4. Homology Group: Compute the homology groups of a complex, allowing you to classify"
  , "     topological spaces by their invariants and study the relationship between different"
  , "     dimensions."
  , ""
  , "  5. Define Your Own Simplical Complex: Create and define custom simplical complexes by"
  , "     specifying vertices, simplices and their relationships. This flexible functionality"
  , "     allows you to tailor the tool to analyze specific structures and scenarios relevant"
  , "     to your work."
  , ""
  , "This tutorial will guide you through each of these functionalities with clear explanations"
  , "examples and step-by-step instructions. By the end, you will be equipped to use OMADA"
  , "efficiently in your research or studies. Whether you are new to algebraic topology or a"
  , "seasoned practitioner, OMADA offers a robust framework for your computational needs."
  , ""
  , "Finlay, we will demonstrate the capabilities of OMADA by analyzing the Klein Bottle, a"
  , "non-orientable surface with fascinating topological properties. This example will showcase how"
  , "OMADA can be used to define a simplical complex, compute boundaries, generate cycles, and"
  , "determine homology classes and groups, giving you a practical understanding of its features."
  , ""
  , "Let's get started!"
  , ""
  , "Set the actual complex of the Klein Bottle by entering ':complex kleinBottle' or just"
  , "':c kleinBottle'. This is a predefined complex given by 9 vertieces and simplices as in the"
  , "following diagram indicated"
  , ""
  , "            A -----> B -----> C -----> A"
  , "            ^        |        |        |"
  , "            |        |        |        |"
  , "            |        |        |        v"
  , "            E ------ H ------ I ------ D"
  , "            ^        |        |        |"
  , "            |        |        |        |"
  , "            |        |        |        v"
  , "            D ------ F ------ G ------ E"
  , "            ^        |        |        |"
  , "            |        |        |        |"
  , "            |        |        |        v"
  , "            A -----> B -----> C -----> A"
  , ""
  , "Now you can explore for example the homology group derived from the 1-chains by entering 'H 1'"
  , "which yields"
  , ""
  , "  Z/2*Z :: abelian group"
  , ""
  , "and is the product of the two abelian groups 'Z/2' and 'Z'."
  , ""
  , "To get all the non-trivial homology groups just enter 'H', which yields"
  , ""
  , "  homology groups"
  , "    0: Z"
  , "    1: Z/2*Z"
  , ""
  , "So the homology group for the 0-chains is isomorphic to 'Z', for the 1-chains is isomorphic"
  , "to 'Z/2*Z' and all others are isomorphic to '0'."
  , ""
  , "To get a generator for the 0-chains, just enter 'C 0' which yields:"
  , ""
  , "  0-chains"
  , "    0: [A]"
  , "    1: [B]"
  , "    .."
  , "    8: [I]"
  , ""
  , "So the simplical complex of the Klein Bottle is given by the 9 ´vertices` form 'A' to 'I'."
  , "Entering 'C 0 1' yields"
  , ""
  , "  [B] :: 0-chain"
  , ""
  , "and is the 0-chain with index 1."
  , ""
  , "To get a generator for the 1-chains, just enter 'C 1', which yields:"
  , ""
  , "  1-chains"
  , "    0: [A,B]"
  , "    1: [A,D]"
  , "    2: [A,F]"
  , "    3: [B,C]"
  , "    .."
  , "    6: [C,A]"
  , "    .."
  , "    26: [I,D]"
  , ""
  , "So the 1-chains are generated by 27 ´segments´ from '[A,B]' to '[I,D]'."
  , ""
  , "To evaluate the boundary for the 1-chain '[A,F]' just enter 'd (C 1 2) which yields the"
  , "0-chain"
  , ""
  , "  -[A] + [F] :: 0-chain"
  , ""
  , "and to evaluate the boundary of the 1-chain '[A,B] + [B,C] + [C,A]' just enter the expression"
  , "'d (C 1 0 + C 1 3 + C 1 6)' which yields"
  , ""
  , "  0 :: O-chain"
  , ""
  , "which is zero and hence it is a 1-cycle. To bind this 1-cycle to the variable 'c' just enter"
  , "'let c = C 1 0 + C 1 3 + C 1 6' and by entering the expression 'c' you can retrieve its value."
  , ""
  , "To evaluate the homology class of the previous defined 1-cycle 'c' just enter 'h c' which yields"
  , ""
  , "  h0 + h1 :: Z/2*Z"
  , ""
  , "where 'h0 = ({1},0)' and 'h1' = (0,1)' are the embedding of the canonical generators for each"
  , "component into the product 'Z/2*Z'."
  , ""
  , "To retrieve the last result of a evaluation just enter 'it' and this yields again"
  , ""
  , "  h0 + h1 :: Z/2*Z"
  , ""
  , "To evaluate the sum of this homology class with itself, just enter 'it + it' which yields"
  , ""
  , "  2!h1 :: Z/2*Z"
  , ""
  , "and is the scalar multiplication of 'h1' by 2. You could have entered also '2!it' which yields"
  , "the same result."
  , ""
  , "To get a generator for the 1-cycles just enter 'D 1' which yields"
  , ""
  , "  1-chains"
  , "    0: [A,B] + [B,C] + [C,A]"
  , "    1: [A,B] + [B,C] + [C,E] + [E,A]"
  , "    .."
  , "    4: [A,B] - [A,F] + [B,F]"
  , "    .."
  , "    18: -[B,C] + [B,G] - [C,E] + [G,E]"
  , ""
  , "and consist of 19 1-cycles. Applying to this sequence the homology class operator 'h'"
  , "- just enter 'h (D 1)' or 'h it' - yields"
  , ""
  , "  homology classes of Z/2*Z"
  , "    0: h0 + h1"
  , "    1: h0 + h1"
  , "    2: h1"
  , "    3: h1"
  , "    8: h1"
  , "    .."
  , "    16: h1"
  , ""
  , "which is the partially sequence of the non-trivial homology classes of 'D 1', and means that the"
  , "component with index i of the resulting sequence is the image of 'D i' under 'h'. As such for"
  , "example the cycles 'D 1 4' to 'D 1 7' are all zero under 'h'."
  , ""
  , "As the homology class of 'D 1 0' and 'D 1 9' are equal to 'h0 + h1 :: Z/2*Z' there exists a"
  , "2-chain 'x', such that 'd x' is equal to 'D 1 0 - D 1 9'. Such a 'x' can be evaluated by the"
  , "´inverse´ boundary operator 'b' by entering 'b (D 1 0 - D 1 9) which yields"
  , ""
  , "  -[C,E,A] + [E,A,B] :: 2-chain"
  , ""
  , "*** have fun ***"
  ]
